AWSTemplateFormatVersion: "2010-09-09"
Description: "API Docker Resources"

Parameters:
  ContainerImage:
    Type: String
    Description: The API ECS Image
  ClusterName:
    Type: String
    Description: The ECS Cluster
  Environment:
    Type: String
    Description: The environment
  DesiredTaskCount:
    Type: Number
    Description: Desired Task Count
    Default: 1
  ContainerCpu:
    Type: String
    Description: Docker CPU requirements
    Default: 256
  ContainerMemory:
    Type: String
    Description: Docker memory limit
    Default: 512
  ElbTargetGroup:
    Type: String
    Description: ELB Target Group ARN
  VpcSubnetList:
    Type: CommaDelimitedList
    Description: List of VPC subnets to use
  VpcSecurityGroupList:
    Type: CommaDelimitedList
    Description: List of VPC security group IDs

Conditions:
  SetDesiredTaskCount:
    !Not [ !Equals [ !Ref DesiredTaskCount, -1 ] ]
  SingleTask:
    !Equals [ !Ref DesiredTaskCount, 1 ]

Resources:
  EcsTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  EcsTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ["sts:AssumeRole"]
      Path: /

  KmsIamPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "${AWS::StackName}-kms"
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - "kms:Get*"
              - "kms:List*"
              - "kms:Decrypt*"
              - "kms:Describe*"
            Resource:
              - Fn::ImportValue:
                  !Sub "${Environment}:security:SecretsKmsKeyArn"
      Roles:
        - !Ref EcsTaskRole

  SecretsIamPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "${AWS::StackName}-secrets"
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - "ssm:GetParameters"
              - "ssm:DescribeParameters"
            Resource:
              - "*"
      Roles:
        - !Ref EcsTaskRole

  S3IamPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "${AWS::StackName}-s3"
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - "s3:ListAllMyBuckets"
            Resource:
              - "*"
          - Effect: Allow
            Action:
              - "s3:PutObject"
              - "s3:ListBucket"
              - "s3:GetObjectAcl"
              - "s3:GetObject"
              - "s3:DeleteObject"
              - "s3:GetBucketLocation"
              - "s3:PutObjectAcl"
            Resource:
              - "arn:aws:s3:::imagesforgingadventures-user-uploads"
              - "arn:aws:s3:::forgingadventures-user-uploads/*"
      Roles:
        - !Ref EcsTaskRole

  ApiCloudwatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/ecs/forgingadventures/${Environment}/api"
      RetentionInDays: 14

  ApiTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: forgingadventures-api
      ExecutionRoleArn: !GetAtt EcsTaskExecutionRole.Arn
      Cpu: !Ref ContainerCpu
      Memory: !Ref ContainerMemory
      NetworkMode: awsvpc
      RequiresCompatibilities: [FARGATE]
      TaskRoleArn: !GetAtt EcsTaskRole.Arn
      ContainerDefinitions:
        - Name: api
          Cpu: !Ref ContainerCpu
          Command: [/sbin/my_init]
          Environment:
            - Name: APP_NAME    # This var is used as namespace to get env. variables from Sys Manager Parameter Store.
              Value: forgingadventures
            - Name: PASSENGER_APP_ENV
              Value: !Ref Environment
          Essential: true
          Image: !Ref ContainerImage
          Memory: !Ref ContainerMemory
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ApiCloudwatchLogsGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: react-client
          PortMappings:
            - ContainerPort: 8000

  ApiService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ClusterName
      DesiredCount: !If [ SetDesiredTaskCount, !Ref DesiredTaskCount, !Ref "AWS::NoValue" ]
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: !If [ SingleTask, 0, 100 ]
      LaunchType: FARGATE
      HealthCheckGracePeriodSeconds: 180
      LoadBalancers:
      - ContainerName: api
        ContainerPort: 8000
        TargetGroupArn: !Ref ElbTargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups: !Ref VpcSecurityGroupList
          Subnets: !Ref VpcSubnetList
      TaskDefinition: !Ref ApiTaskDefinition

Outputs:
  ApiTaskDefinition:
    Description: API Task Definition
    Value: !Ref ApiTaskDefinition
