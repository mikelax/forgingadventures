AWSTemplateFormatVersion: '2010-09-09'
Description: "VPC Security Groups and Access rules"

Parameters:
  Environment:
    Type: String
    Description: The environment for the VPC
    Default: test
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: The VPC ID
  VpcCidrBlock:
    Type: String
    Description: VPC CIDR block
    Default: 10.0.0.0/16

Resources:
  RedisSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub 'Redis-${AWS::StackName}'
      GroupDescription: !Sub 'Allow access to redis cache for VPC ${VpcId}'
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          CidrIp: !Ref VpcCidrBlock
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Name
          Value: forgingadventures

  ElbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub 'Elb-${AWS::StackName}'
      GroupDescription: !Sub 'Allow access to ELB inbound and to VPC ${VpcId}'
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Name
          Value: forgingadventures

  EcsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub 'Ecs-${AWS::StackName}'
      GroupDescription: !Sub 'Allow access to ECS Tasks inbound and to VPC ${VpcId}'
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          SourceSecurityGroupId: !Ref ElbSecurityGroup
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          SourceSecurityGroupId: !Ref ElbSecurityGroup
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Name
          Value: forgingadventures

  RdsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub 'Rds-${AWS::StackName}'
      GroupDescription: !Sub 'Allow access to RDS for VPC ${VpcId}'
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: !Ref VpcCidrBlock
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Name
          Value: forgingadventures

  DevelopersSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow developers access to resources
      VpcId: !Ref VpcId
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Name
          Value: forgingadventures

  RdsIngressDevelopers:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow Developers access to RDS
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      GroupId: !GetAtt RdsSecurityGroup.GroupId
      SourceSecurityGroupId: !GetAtt DevelopersSecurityGroup.GroupId

  MichaelDeveloperIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Michael Ingress
      GroupId: !Ref DevelopersSecurityGroup
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      CidrIp: 71.187.54.101/32

  NazarDeveloperIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Nazar Ingress
      GroupId: !Ref DevelopersSecurityGroup
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      CidrIp: 82.69.30.21/32

  SecretsKmsKey:
    Type: AWS::KMS::Key
    Properties:
      Description: !Sub 'Key to encrypt ${Environment} secrets'
      Enabled: true
      EnableKeyRotation: false
      KeyPolicy:
        Version: "2012-10-17"
        Id: "key-default-1"
        Statement:
          - Sid: "Allow administration of the key"
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action:
              - "kms:*"
            Resource: "*"
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Name
          Value: forgingadventures

  SecretsKmsKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub 'alias/secrets/${Environment}'
      TargetKeyId: !Ref SecretsKmsKey

Outputs:
  EcsSecurityGroup:
    Description: ECS Group ID
    Value: !Ref EcsSecurityGroup
  ElbSecurityGroupId:
    Description: Elb Group ID
    Value: !Ref ElbSecurityGroup
  RedisSecurityGroupId:
    Description: Redis Security Group ID
    Value: !Ref RedisSecurityGroup
  RdsSecurityGroupId:
    Description: RDS Security Group ID
    Value: !Ref RdsSecurityGroup
  SecretsKmsKeyArn:
    Description: SecretsKmsKey ARN
    Value: !GetAtt SecretsKmsKey.Arn
    Export:
      Name: !Sub "${Environment}:security:SecretsKmsKeyArn"
